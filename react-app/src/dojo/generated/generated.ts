/* Autogenerated file. Do not edit manually. */

import { Account, Call, Event, InvokeTransactionReceiptResponse, shortString } from "starknet";
import { DojoProvider } from "@dojoengine/core";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider, world: string) {
  function play() {
    const contract_name = "play";

    const initialize = async ({
      account,
    }: {
      account: Account;
    }) => {
      try {
        return await provider.execute(
          account,
          contract_name,
          "initialize",
          [world]
        );
      } catch (error) {
        console.error("Error executing initialize:", error);
        throw error;
      }
    };

    const create = async ({
      account,
      game_id,
      name,
      order,
    }: {
      account: Account;
      game_id: number;
      name: bigint;
      order: number;
    }) => {
      try {
          return await provider.execute(account, contract_name, "create", [world, game_id, name, order]);
      } catch (e) {
          console.error(e);
      }
  }

  const buy = async ({
    account,
    game_id,
  }: {
    account: Account;
    game_id: number;
  }) => {
      try {
          return await provider.execute(account, contract_name, "buy", [world, game_id]);
      } catch (e) {
          console.error(e);
      }
  }

  const draw = async ({
    account,
    game_id,
  }: {
    account: Account;
    game_id: number;
  }) => {
      try {
          return await provider.execute(account, contract_name, "draw", [world, game_id]);
      } catch (e) {
          console.error(e);
      }
  }

  const discard = async ({
    account,
    game_id,
  }: {
    account: Account;
    game_id: number;
  }) => {
      try {
          return await provider.execute(account, contract_name, "discard", [world, game_id]);
      } catch (e) {
          console.error(e);
      }
  }

  const build = async ({
    account,
    game_id,
    tile_id,
    orientation,
    x,
    y,
    role,
    spot,
  }: {
    account: Account;
    game_id: number;
    tile_id: number;
    orientation: number;
    x: number;
    y: number;
    role?: number;
    spot?: number;
  }) => {

      try {
          return await provider.execute(account, contract_name, "build", [world, game_id, tile_id, orientation, x, y, role || 0, spot || 0]);
      } catch (e) {
          console.error(e);
      }
  }

  const collect = async ({
    account,
    game_id,
    tile_id,
    spot,
  }: {
    account: Account;
    game_id: number;
    tile_id: number;
    spot: number;
  }) => {
      try {
          return await provider.execute(account, contract_name, "collect", [world, game_id, tile_id, spot]);
      } catch (e) {
          console.error(e);
      }
  }

    return { initialize, create, buy, draw, discard, build, collect};
  }
  return {
    play: play(),
  };
}
