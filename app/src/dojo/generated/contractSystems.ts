/* Autogenerated file. Do not edit manually. */

import { DojoProvider } from "@dojoengine/core";
import { Config } from "../../../dojoConfig.ts";
import {
  InitializeHost,
  CreateGame,
  Claim,
  Sponsor,
  InitializeManage,
  CreatePlayer,
  InitializePlay,
  Draw,
  Discard,
  Surrender,
  Build,
} from "../types/systems";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export const getContractByName = (manifest: any, name: string) => {
  const contract = manifest.contracts.find((contract: any) =>
    contract.name.includes("::" + name),
  );
  if (contract) {
    return contract.address;
  } else {
    return "";
  }
};

export async function setupWorld(provider: DojoProvider, config: Config) {
  function host() {
    const contract_name = "host";
    const contract = config.manifest.contracts.find((c) =>
      c.name.includes(contract_name),
    );
    if (!contract) {
      throw new Error(`Contract ${contract_name} not found in manifest`);
    }

    const initialize = async ({ account, world }: InitializeHost) => {
      try {
        return await provider.execute(account, contract_name, "initialize", [
          world,
        ]);
      } catch (error) {
        console.error("Error executing initialize:", error);
        throw error;
      }
    };

    const create = async ({ account }: CreateGame) => {
      const contract_address = getContractByName(config.manifest, "host");
      const calls = [
        {
          contractAddress: config.feeTokenAddress,
          entrypoint: "approve",
          calldata: [contract_address, `0x${(1e18).toString(16)}`, "0x0"],
        },
        {
          contractAddress: contract_address,
          entrypoint: "create",
          calldata: [provider.getWorldAddress()],
        },
      ];
      try {
        return await provider.executeMulti(account, calls);
      } catch (error) {
        console.error("Error executing initialize:", error);
        throw error;
      }
    };

    const claim = async ({ account, tournament_id, rank }: Claim) => {
      try {
        return await provider.execute(account, contract_name, "claim", [
          provider.getWorldAddress(),
          tournament_id,
          rank,
        ]);
      } catch (error) {
        console.error("Error executing initialize:", error);
        throw error;
      }
    };

    const sponsor = async ({ account, amount }: Sponsor) => {
      try {
        return await provider.execute(account, contract_name, "sponsor", [
          provider.getWorldAddress(),
          amount,
        ]);
      } catch (error) {
        console.error("Error executing initialize:", error);
        throw error;
      }
    };

    return {
      address: contract.address,
      initialize,
      create,
      claim,
      sponsor,
    };
  }

  function manage() {
    const contract_name = "manage";
    const contract = config.manifest.contracts.find((c) =>
      c.name.includes(contract_name),
    );
    if (!contract) {
      throw new Error(`Contract ${contract_name} not found in manifest`);
    }

    const initialize = async ({ account, world }: InitializeManage) => {
      try {
        return await provider.execute(account, contract_name, "initialize", [
          world,
        ]);
      } catch (error) {
        console.error("Error executing initialize:", error);
        throw error;
      }
    };

    const create = async ({ account, name, master }: CreatePlayer) => {
      try {
        return await provider.execute(account, contract_name, "create", [
          provider.getWorldAddress(),
          name,
          master,
        ]);
      } catch (error) {
        console.error("Error executing initialize:", error);
        throw error;
      }
    };
    return { address: contract.address, initialize, create };
  }

  function play() {
    const contract_name = "play";
    const contract = config.manifest.contracts.find((c) =>
      c.name.includes(contract_name),
    );
    if (!contract) {
      throw new Error(`Contract ${contract_name} not found in manifest`);
    }

    const initialize = async ({ account, world }: InitializePlay) => {
      try {
        return await provider.execute(account, contract_name, "initialize", [
          world,
        ]);
      } catch (error) {
        console.error("Error executing initialize:", error);
        throw error;
      }
    };

    const draw = async ({ account, game_id }: Draw) => {
      try {
        return await provider.execute(account, contract_name, "draw", [
          provider.getWorldAddress(),
          game_id,
        ]);
      } catch (error) {
        console.error("Error executing initialize:", error);
        throw error;
      }
    };

    const discard = async ({ account, game_id }: Discard) => {
      try {
        return await provider.execute(account, contract_name, "discard", [
          provider.getWorldAddress(),
          game_id,
        ]);
      } catch (error) {
        console.error("Error executing initialize:", error);
        throw error;
      }
    };

    const surrender = async ({ account, game_id }: Surrender) => {
      try {
        return await provider.execute(account, contract_name, "surrender", [
          provider.getWorldAddress(),
          game_id,
        ]);
      } catch (error) {
        console.error("Error executing initialize:", error);
        throw error;
      }
    };

    const build = async ({
      account,
      game_id,
      orientation,
      x,
      y,
      role,
      spot,
    }: Build) => {
      try {
        return await provider.execute(account, contract_name, "build", [
          provider.getWorldAddress(),
          game_id,
          orientation,
          x,
          y,
          role,
          spot,
        ]);
      } catch (error) {
        console.error("Error executing initialize:", error);
        throw error;
      }
    };

    return {
      address: contract.address,
      initialize,
      draw,
      discard,
      surrender,
      build,
    };
  }

  return {
    host: host(),
    manage: manage(),
    play: play(),
  };
}
